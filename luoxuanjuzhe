给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。

示例:

输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
解题：
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** generateMatrix(int n, int* returnSize, int** returnColumnSizes){
if (n == 0 || returnSize == NULL) {
        return NULL;
    }
    int **matrix=(int **)malloc(sizeof(int*)*n);
    *returnColumnSizes = (int *)malloc(sizeof(int)*n);
    for(int i=0;i<n;i++){
        matrix[i]=(int*)malloc(sizeof(int)*n);
         *(*returnColumnSizes+i)=n;
    }
    int c=1;
    int up=0,down=n-1,left=0,right=n-1;
    while(up<=down&&left<=right){
        for(int i=left;i<=right;i++){
            matrix[up][i]=c++;
        }
        up++;
        if(up>down){
            break;
        }
        for(int i=up;i<=down;i++){
            matrix[i][right]=c++;
        }
        right--;
        if(left>right){
            break;
        }
        for(int i=right;i>=left;i--){
           matrix[down][i]=c++;
        }
        down--;
        if(up>down){
            break;
        }
        for(int i=down;i>=up;i--){
            matrix[i][left]=c++;
        }
        left++;
        if(left>right){
            break;
        }
    }
    *returnSize=n;  
    return matrix;
}
