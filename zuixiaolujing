给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-path-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
解题：
int minPathSum(int** grid, int gridSize, int* gridColSize){
int i, j;
int **dp = (int **) malloc(gridRowSize*sizeof(int *));
for (i=0; i<gridRowSize; i++) {
	dp[i] = (int *) malloc(cols*sizeof(int));
}
int sum = 0;
for (i=0; i<gridRowSize; i++) {
	sum += grid[i][0];
	dp[i][0] = sum;
}
sum = 0;
for (j=0; j<cols; j++) {
	sum += grid[0][j];
	dp[0][j] = sum;
} 
for (i=1; i<gridRowSize; i++) {
	for (j=1; j<cols; j++) {
		dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
	}
} 
return dp[gridRowSize-1][cols-1];
int main() {
int i, j, row, col;
scanf("%d%d", &row, &col); // 3 3
int **grid = (int **) malloc(row*sizeof(int *));
for (i=0; i<row; i++) {
	grid[i] = (int *) malloc(col*sizeof(int));
	for (j=0; j<col; j++) {
		scanf("%d", &grid[i][j]);
	}
} 
printf("%d", minPathSum(grid, row, &col));

free(grid);

return 0;
}
代码
int min(int a, int b) {
	return a<b ? a : b;	
}

int minPathSum(int** grid, int gridRowSize, int *gridColSize){
	int cols = *gridColSize;
	if (gridRowSize == 0) {
		return 0;
	} 

	int i, j;
	int **dp = (int **) malloc(gridRowSize*sizeof(int *));	// 动态分配二维数组内存 
	for (i=0; i<gridRowSize; i++) {
		dp[i] = (int *) malloc(cols*sizeof(int));
	}
	int sum = 0;
	for (i=0; i<gridRowSize; i++) {
		sum += grid[i][0];
		dp[i][0] = sum;
	}
	sum = 0;
	for (j=0; j<cols; j++) {
		sum += grid[0][j];
		dp[0][j] = sum;
	} 
	for (i=1; i<gridRowSize; i++) {
}
